             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

It depends on the design of virtual memory, if the bytes of the page are stored continuously.
1)For a full page (4,096 bytes) minimum number of calls are 1, if the data the whole data is in the same page
  maximum number of calls are 2, if the data is split between two pages.
2)For only 2 bytes it is the same as the previous, minimum number of calls are 1, if the data is within a a single page
  maximum number of calls are 2 if the two bytes are the last byte in a page and the first byte of the next page.
There is no room to improve these numbers.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

- Wait system calls mainly invokes process_wait which includes the implementation of wait.
- We used child struct as mentioned before to store each child id, thread pointer and exit status.
- We maintain a hash table of children processes in each process.
- When the process is created it is added to its parent hash table to keep track of it.
- When process_wait is called it is check for the child in its hash table with the id.
    -if it is not found we return -1.
    -else we wait on the semaphore until the child terminates and signals the semaphore
     and in this case we have the exit status of the child stored in its record and we return it.
- If child was already terminated before calling wait then the semaphore would have 1 value and the
   exit status would be ready then we would return the status directly.
- After that we remove child record from parent's hash table.
- When parent dies before its children, then we set all children's parent to NULL.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We avoided bad user memory access and NULL pointer by checking the pointers
first before calling system_calls function we check that it is a valid pointer
and an user virtual address also we check that all the size of pointers are
valid (ie. we check that esp + size - 1 is a valid pointer).
Example: if we do read system call then all the three arguments are validated
if anyone is invalid then the process will be terminated, then we validate the
last pointer of the buffer (i.e buffer + size - 1) if it is valid we do the read
operation.

Also we managed that issues by handling the page fault exception so that it kill
the process if there is a problem in user program.

Finally when the process is being terminated all the resources such as files,
locks, memory,...etc are freed.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

In order to ensure the synchronization between the parent process and
child process we used a semaphore.
The parent call create the new process and pass a reference to success 
flag which indicates if the execution done successfully or not and 
wait on a semaphore. The child process then try to load the 
executable file if it succeed the the success flag will set to one,
then it sema up the semaphore and the parent continue. If the success
flag is one we return new process id or -1 otherwise.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
